--------------------------------------------------------------------------------------------------------------------
1. git 관련 문서를 찾아 읽고 git 에 있는 개념들과 할 수 있는 것들에 대해 과제 본문에 정리한다. 다음 링크들을 (모두) 읽어보고 정리한다.
--------------------------------------------------------------------------------------------------------------------
git에서 가장 중요한 개념
--------------------------------------------------------------------------------------------------------------------
버전관리 ( Version Control System )
공유 및 개인적(branch) 패치(commit)와 병합(merge) 
.
.
--------------------------------------------------------------------------------------------------------------------
사용 방법
--------------------------------------------------------------------------------------------------------------------
git 과 sourcetree를 다운 및 설치
.
sourcetree에 있는 action -> git.bash(turminal == command line)에서 git 관련 명령어를 사용하여 사용가능
.
sourcetree -> git은 명령어로 버전 관리를 하기 때문에 우선 사용이 용이한 sourcetree를 사용한다.
sourcetree가 익숙해지면 명령어(command line)로 넘어간다.
.
(아직 command line 방식이 익숙하지 않아 sourcetree로 gui방식을 일부 사용하여 익숙할 때 까지 사용하려고 합니다.)
.
.
--------------------------------------------------------------------------------------------------------------------
git 사용관련 설명 사이트(한글판)
--------------------------------------------------------------------------------------------------------------------
https://git-scm.com/book/ko/v2
.
.
--------------------------------------------------------------------------------------------------------------------
git에서 사용 가능한 명령어
--------------------------------------------------------------------------------------------------------------------
git init(저장소 만들기)
.
git clone /로컬/저장소/경로(저장소 받아오기)
.
git add<파일 이름>(추가와 확정(commit))
git commit -m "설명"(해당 확정본에 대한 설명)
.
git push origin master변경 내용 발행하기(push)
.
git checkout -b feature_x가지 만들기(branch)
git checkout master가지 돌아오기
git branch -d feature_x가지 삭제하기
git push origin<가지 이름>가지 공유하기
.
git pull가지 갱신하기
git merge<가지 이름>현재 가지 master가지에 병합하기
git add<파일 이름>파일 병합하기
.
git diff<원래 가지><비교 대상 가지>가지 비교하기
.
git tag <ver> <식별자>확정본 식별자 붙이기
git log확정본이 고유할 때
.
git checkout --<파일 이름>로컬 변경 내용 되돌리기
git fetch origin로컬에 있는 모든 변경 내용 삭제 및 master가지의 최신 이력 가져오기
git reset --hard origin/master''
.
.
.
.
.
.
--------------------------------------------------------------------------------------------------------------------
2. 파이썬 기초 (1) 문서를 읽고 코드를 따라 쳐 본다. 다르게 변형해서도 해 보도록 한다.
- 해 본 결과를 본문에 입력하고 각각에 대한 느낀점을 적도록 한다.
--------------------------------------------------------------------------------------------------------------------
c 계열 언어로 다져진 프로그래밍 방식과 전혀 다른 방식으로 오히려 손 가는대로 코드를 짜면 쉽게 된다는것이 신기했습니다.
.
데이터를 관리하는 방식이 달랐고, 특히 슬라이스 부분이 c언어의 for문과 비교되어 재미있었습니다.
.
set이나 remove는 자료형을 관리하는 방식에서 STL을 생각나게 했으며 type은 auto를, 같은 자료형을 멋대로 더하고 뺀다는것에서 string을 연상캐했습니다.
.
(다만 차이점이 있다면 곱하는 것과 char, string 차이가 없다는것 정도?)
.
자료형의 개념이 있어 적응하기 편했다는 느낌이 있었습니다.
.
마지막으로 아는 프로그래밍 언어가 c계열 뿐이라 비교 대상이 이것밖에없었지만 언젠간 python을 시작으로 html, java쪽으로 넘어가고 싶다는 생각이 들었습니다.
.
.
.
.
.
.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Python 3.7.5 (tags/v3.7.5:5c02a39a0b, Oct 15 2019, 00:11:34) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> 1+@
SyntaxError: invalid syntax
>>> 1+2
3
>>> 100-1
99
>>> 7*52
364
>>> 124/8
15.5
>>> 1024//8
128
>>> 3.1415926535*3**3
84.8230016445
>>> pi=3.1415926535
>>> pi*4**2
50.265482456
>>> pi*(4*4)
50.265482456
>>> print(pi)
3.1415926535
>>> pi
3.1415926535
>>> r=7
>>> area=pi*r**2
>>> print(area)
153.9380400215
>>> 
>>> name="chino"
>>> name1='wjdwkfl200'
>>> 
>>> print(name)
chino
>>> print(name1)
wjdwkfl200
>>> 
>>> type(4)
<class 'int'>
>>> type(pi)
<class 'float'>
>>> type(name)
<class 'str'>
>>> 
>>> 
>>> 4>3
True
>>> 3.5<-1.3
False
>>> a=365>366
>>> print(a)
False
>>> a
False
>>> type(a)
<class 'bool'>
>>> 
>>> 
>>> first="Daehyun"
>>> last="Ledd"
>>> name=first+" "+last
>>> name
'Daehyun Ledd'
>>> print(name)
Daehyun Ledd
>>> name*2
'Daehyun LeddDaehyun Ledd'
>>> name[0]
'D'
>>> name[2]
'e'
>>> name[-1]
'd'
>>> 
>>> 
>>> title="python 2d game programming"
>>> tile[0:6]
Traceback (most recent call last):
  File "<pyshell#47>", line 1, in <module>
    tile[0:6]
NameError: name 'tile' is not defined
>>> title[0:6]
'python'
>>> title[7:9]
'2d'
>>> title[::2]
'pto dgm rgamn'
>>> title[::-1]
'gnimmargorp emag d2 nohtyp'
>>> 
>>> 
>>> gochiusa=['chino','syaro','lize','cocoa','maya','megu']
>>> elsword=['rena','eve','elsword','aisha','ru']
>>> gochiusa.append('new character')
>>> gochiusa.sort()
>>> gochiusa
['chino', 'cocoa', 'lize', 'maya', 'megu', 'new character', 'syaro']
>>> character=gochiusa+elsword
>>> character
['chino', 'cocoa', 'lize', 'maya', 'megu', 'new character', 'syaro', 'rena', 'eve', 'elsword', 'aisha', 'ru']
>>> charater.remove('new character')
Traceback (most recent call last):
  File "<pyshell#61>", line 1, in <module>
    charater.remove('new character')
NameError: name 'charater' is not defined
>>> charater.remove('new character')
Traceback (most recent call last):
  File "<pyshell#62>", line 1, in <module>
    charater.remove('new character')
NameError: name 'charater' is not defined
>>> charater.remove('newcharacter')
Traceback (most recent call last):
  File "<pyshell#63>", line 1, in <module>
    charater.remove('newcharacter')
NameError: name 'charater' is not defined
>>> charater.remove("new character")
Traceback (most recent call last):
  File "<pyshell#64>", line 1, in <module>
    charater.remove("new character")
NameError: name 'charater' is not defined
>>> character.remove("new character")
>>> character
['chino', 'cocoa', 'lize', 'maya', 'megu', 'syaro', 'rena', 'eve', 'elsword', 'aisha', 'ru']
>>> character[0]
'chino'
>>> character[0:3]
['chino', 'cocoa', 'lize']
>>> character[-3]
'elsword'
>>> character[-3:]
['elsword', 'aisha', 'ru']
>>> 
>>> 
>>> score={'chino':100,'syaro':85,'lize':98}
>>> type(score)
<class 'dict'>
>>> score[chino]
Traceback (most recent call last):
  File "<pyshell#75>", line 1, in <module>
    score[chino]
NameError: name 'chino' is not defined
>>> score['chino']
100
>>> score["chino"]
100
>>> del score["lize"]
>>> score
{'chino': 100, 'syaro': 85}
>>> score.keys()
dict_keys(['chino', 'syaro'])
>>> score.values()
dict_values([100, 85])
>>> 
>>> 
>>> 'chino' in score
True
>>> 'lize' int score
SyntaxError: invalid syntax
>>> 'lize' in score
False
>>> score.clear
<built-in method clear of dict object at 0x000001F697D74368>
>>> score.clear()
>>> score
{}
>>> 
>>> 
>>> t1=(1,2,3)
>>> t4=1,2,3,4
>>> type(t4)
<class 'tuple'>
>>> t4
(1, 2, 3, 4)
>>> t5=(1,'a',"jung",(1,2))
>>> t1[1:]
(2, 3)
>>> t1+t5
(1, 2, 3, 1, 'a', 'jung', (1, 2))
>>> t4*2
(1, 2, 3, 4, 1, 2, 3, 4)
>>> t5*2
(1, 'a', 'jung', (1, 2), 1, 'a', 'jung', (1, 2))
>>> 
>>> s1={1,2,3}
>>> type(s1)
<class 'set'>
>>> l1=[1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,5,]
>>> s1=set(l1)
>>> s1
{1, 2, 3, 4, 5}
>>> s2={3,5,6,7}
>>> s1+s2
Traceback (most recent call last):
  File "<pyshell#108>", line 1, in <module>
    s1+s2
TypeError: unsupported operand type(s) for +: 'set' and 'set'
>>> s1|s2
{1, 2, 3, 4, 5, 6, 7}
>>> s2-s1
{6, 7}
>>> s1.add(8)
>>> s1
{1, 2, 3, 4, 5, 8}
>>> s2.remove(3)
>>> s2
{5, 6, 7}
>>> 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////