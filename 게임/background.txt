import gfw
from pico2d import *
from gobj import *

class Background:
    def __init__(self, imageName):
        self.imageName = imageName
        self.image = gfw.image.load(res(imageName))
        self.target = None
        self.cw, self.ch = get_canvas_width(), get_canvas_height()
        self.win_rect = 0, 0, self.cw, self.ch
        self.center = self.image.w // 2, self.image.h // 2
        hw, hh = self.cw // 2, self.    ch // 2
        self.boundary = hw, hh, self.image.w - hw, self.image.h - hh
    def set_target(self, target):
        self.target = target
        self.update()
    def draw(self):
        self.image.clip_draw_to_origin(*self.win_rect, 0, 0)
    def update(self):
        if self.target is None:
            return
        tx, ty = self.target.pos
        sl = round(tx - self.cw / 2)
        sb = round(ty - self.ch / 2)
        self.win_rect = sl, sb, self.cw, self.ch
    def get_boundary(self):
        return self.boundary
    def translate(self, point):
        x, y = point
        l, b, r, t = self.win_rect
        return l + x, b + y
    def to_screen(self, point):
        # return self.cw // 2, self.ch // 2
        x, y = point
        l, b, r, t = self.win_rect
        return x - l, y - b

    # def to_screen(self, point):
    #     hw, hh = self.cw // 2, self.ch // 2
    #     x, y = point

    #     if x > self.image.w - hw:
    #         x = self.cw - (self.image.w - x)
    #     elif x > hw:
    #         x = self.cw // 2

    #     if y > self.image.h - hh:
    #         y = self.ch - (self.image.h - y)
    #     elif y > hh:
    #         y = self.ch // 2

    #     return x, y

class FixedBackground(Background):
    MARGIN_L, MARGIN_B, MARGIN_R, MARGIN_T = 20, 40, 20, 40
    def __init__(self, imageName):
        super().__init__(imageName)
        self.boundary = (
            FixedBackground.MARGIN_L, 
            FixedBackground.MARGIN_B,
            self.image.w - FixedBackground.MARGIN_R, 
            self.image.h - FixedBackground.MARGIN_T
        )
    def update(self):
        if self.target is None:
            return
        tx, ty = self.target.pos
        sl = clamp(0, round(tx - self.cw / 2), self.image.w - self.cw)
        sb = clamp(0, round(ty - self.ch / 2), self.image.h - self.ch)
        self.win_rect = sl, sb, self.cw, self.ch

class InfiniteBackground(Background):
    def __init__(self, imageName, width=0, height=0):
        super().__init__(imageName)
        self.boundary = (-sys.maxsize, -sys.maxsize, sys.maxsize, sys.maxsize)
        self.fix_x, self.fix_y = self.cw // 2, self.ch // 2
        if width == 0:
            width = self.image.w
        if height == 0:
            height = self.image.h
        self.w, self.h = width, height
    def set_fixed_pos(self, x, y):
        self.fix_x, self.fix_y = x, y
    def update(self):
        if self.target is None:
            return
        tx, ty = self.target.pos

        # quadrant 3
        q3l = round(tx - self.fix_x) % self.image.w
        q3b = round(ty - self.fix_y) % self.image.h
        q3w = clamp(0, self.image.w - q3l, self.image.w)
        q3h = clamp(0, self.image.h - q3b, self.image.h)
        self.q3rect = q3l, q3b, q3w, q3h
        # quadrant 2
        self.q2rect = q3l, 0, q3w, self.ch - q3h
        self.q2origin = 0, q3h
        # quadrant 4
        self.q4rect = 0, q3b, self.cw - q3w, q3h
        self.q4origin = q3w, 0
        # quadrant 1
        self.q1rect = 0, 0, self.cw - q3w, self.ch - q3h
        self.q1origin = q3w, q3h

    def draw(self):
        self.image.clip_draw_to_origin(*self.q3rect, 0, 0)
        self.image.clip_draw_to_origin(*self.q2rect, *self.q2origin)
        self.image.clip_draw_to_origin(*self.q4rect, *self.q4origin)
        self.image.clip_draw_to_origin(*self.q1rect, *self.q1origin)

    def to_screen(self, point):
        x, y = point
        tx, ty = self.target.pos
        return self.fix_x + x - tx, self.fix_y + y - ty

    def translate(self, point):
        x, y = point
        tx, ty = self.target.pos
        dx, dy = x - self.fix_x, y - self.fix_y
        return tx + dx, ty + dy

class HorzScrollBackground:
    def __init__(self, imageName):
        self.imageName = imageName
        self.image = gfw.image.load(res(imageName))
        self.cw, self.ch = get_canvas_width(), get_canvas_height()
        self.scroll = 0
        self.speed = 0

    def update(self):
        self.scroll += self.speed * gfw.delta_time

    def set_scroll(self, scroll):
        self.scroll = scroll

    def draw(self):
        left, bottom = 0, 0
        page = self.image.w * self.ch // self.image.h
        curr = int(-self.scroll) % page
        if curr > 0:
            sw = int(1 + self.image.h * curr / self.ch)
            sl = self.image.w - sw
            src = sl, 0, sw, self.image.h
            dw = int(sw * self.ch / self.image.h)
            dst = curr - dw, 0, dw, self.ch
            self.image.clip_draw_to_origin(*src, *dst)
        dst_width = round(self.image.w * self.ch / self.image.h)
        while curr + dst_width < self.cw:
            dst = curr, 0, dst_width, self.ch
            self.image.draw_to_origin(*dst)
            curr += dst_width
        if curr < self.cw:
            dw = self.cw - curr
            sw = int(1 + self.image.h * dw / self.ch)
            src = 0, 0, sw, self.image.h
            dw = int(sw * self.ch / self.image.h)
            dst = curr, 0, dw, self.ch
            self.image.clip_draw_to_origin(*src, *dst)

    def to_screen(self, point):
        x, y = point
        return x - self.scroll, y

    def translate(self, point):
        x, y = point
        return x + self.scroll, y

    def get_boundary(self):
        return (-sys.maxsize, -sys.maxsize, sys.maxsize, sys.maxsize)

    #     self.image.clip_draw_to_origin(*self.src_rect_1, *self.dst_rect_1)
    #     self.image.clip_draw_to_origin(*self.src_rect_2, *self.dst_rect_2)

    # private void drawHorizontal(Canvas canvas) {
    #     int left = 0;
    #     int top = 0;
    #     int right = UiBridge.metrics.size.x;
    #     int bottom = UiBridge.metrics.size.y;
    #     int pageSize = sbmp.getWidth() * (bottom - top) / sbmp.getHeight();

    #     canvas.save();
    #     canvas.clipRect(left, top, right, bottom);

    #     float curr = scrollX % pageSize;
    #     if (curr > 0) curr -= pageSize;
    #     curr += left;
    #     while (curr < right) {
    #         dstRect.set(curr, top, curr + pageSize, bottom);
    #         curr += pageSize;
    #         canvas.drawBitmap(sbmp.getBitmap(), srcRect, dstRect, null);
    #     }
    #     canvas.restore();
    # }

class VertScrollBackground:
    def __init__(self, imageName, cw, ch):
        self.imageName = imageName
        self.image = gfw.image.load(res(imageName))
        self.cw, self.ch = cw, ch
        self.scroll = 0
        self.speed = 0

    def update(self):
        self.scroll += self.speed * gfw.delta_time

    def set_scroll(self, scroll):
        self.scroll = scroll

    def draw(self):
        left, bottom = 0, 0
        page = self.image.h * self.cw // self.image.w
        curr = int(-self.scroll) % page
        if curr > 0:
            sh = int(1 + self.image.w * curr / self.cw)
            sb = self.image.h - sh
            src = 0, sb, self.image.w, sh
            dh = int(sh * self.cw / self.image.w)
            dst = 0, curr - dh, self.cw, dh
            self.image.clip_draw_to_origin(*src, *dst)
        dst_height = page #round(self.image.w * self.ch / self.image.h)
        while curr + dst_height < self.ch:
            dst = 0, curr, self.cw, dst_height
            self.image.draw_to_origin(*dst)
            curr += dst_height
        if curr < self.ch:
            dh = self.ch - curr
            sh = int(1 + self.image.w * dh / self.cw)
            src = 0, 0, self.image.w, sh
            dh = int(sh * self.cw / self.image.w)
            dst = 0, curr, self.cw, dh
            self.image.clip_draw_to_origin(*src, *dst)

    def to_screen(self, point):
        x, y = point
        return x - self.scroll, y

    def translate(self, point):
        x, y = point
        return x + self.scroll, y

    def get_boundary(self):
        return (-sys.maxsize, -sys.maxsize, sys.maxsize, sys.maxsize)

image_gap = 200

class VertexSolidScrollBackground:
    def __init__(self, imageName, x, y, cw, ch, standard_y, speed):
        self.imageName = imageName
        self.image = gfw.image.load(res(imageName))
        self.x, self.y = x, y
        self.cw, self.ch = cw, ch
        self.start = standard_y
            
        self.speed = speed

        global px, py, alpha
        px = []
        py = []
        alpha = []

        for n in range(3):
            px.append(n)
            py.append(n)
            alpha.append(n)

        
        # 첫 번째 이미지는 가운데에서 시작하여 내려간다. 1순위
        px[0] = self.x + self.cw // 5
        py[0] = image_gap * 2

        # 두 번째 이미지는 오른쪽에서 시작하여 내려간다. 2순위
        px[1] = self.x + self.cw // 5 * 2
        py[1] = image_gap * 1

        # 세 번째 이미지는 왼쪽에서 시작하여 내려간다. 3순위
        px[2] = self.x + self.cw // 5 * 0
        py[2] = image_gap * 0

        global dist        
        dist = self.start - self.y

    def update(self):

        global px, py, alpha
        global dist

        for n in range(3):
            # 이미지의 시작 y지점부터의 거리 계산
            py[n] += gfw.delta_time * self.speed
            if py[n] > dist + self.image.h:
                py[n] = 0

            # 이미지의 알파값 계산
            if py[n] >= dist:
                alpha[n] = 255
            else:
                calculate_alpha = 255 / dist * py[n]
                alpha[n] = (int)(calculate_alpha)

    def draw(self):
        
        global px, py, alpha

        for n in range(3):
            gfw.image.setImageAlpha(self.image, (int)(alpha[n]))
            self.image.clip_draw_to_origin(0, 0, self.image.w, self.image.h, px[n], self.start - py[n] - self.image.h, self.cw, self.ch)





































class VertexSolidScrollBackground:
    def __init__(self, image_left, image_right, x, y, cw, ch, standard_y, speed_down, speed_sideways):
        self.image_left = gfw.image.load(res(image_left))
        self.image_right = gfw.image.load(res(image_right))
        self.x, self.y = x, y
        self.cw, self.ch = cw, ch
        self.start = standard_y
            
        self.speed_down = speed_down
        self.speed_sideways = speed_sideways

    
        # 시작 지점(왼쪽 기준)
        # down = self.x + self.cw // 6 * 2, self.start - 나무 아랫부분의 높이
        # middle = self.x + self.cw // 6 * 2, self.start - 나무 중간부분의 높이
        # up = self.x + self.cw // 6 * 2, self.start - 나무 윗부분의 높이

        # 시작 지점(오른쪽 기준)
        # down = self.x + self.cw // 6 * 4, self.start - 나무 아랫부분의 높이
        # middle = self.x + self.cw // 6 * 4 + (나무 아랫부분의 너비 - 나무 중간부분의 너비), self.start - 나무 중간부분의 높이
        # up = self.x + self.cw // 6 * 4 + (나무 중간부분의 너비 - 나무 윗부분의 너비), self.start - 나무 윗부분의 높이

        movement_down = 20
        movement_middle = 40
        movement_up = 60

        global left, right, alpha, speeds
        left = []
        right = []
        alpha = []
        speeds = []

        Num = (self.start - self.y) // image_gap


        for n in range(3):
            left.append(n, n)
            right.append(n, n)
            alpha.append(n, n)
            speeds.append(n)

        # 리소스 touhou_tree를 기준으로 만듦.
        # 나무를 아래 중간 위 3단계로 분리하여 생성
        # 모든 이미지를 양쪽에서 생성한다.

        # # 첫 번째 이미지는 나무의 아래부분

        # # 0 == 아래부분
        # for n in range(Num)
        #     left[0].append(self.x + self.cw // 6 * 2, self.start + image_gap * (Num - n))
        #     right[0].append(self.x + self.cw // 6 * 4, self.start + image_gap * (Num - n))
        # speeds[0] = self.speed

        # # 1 == 중간부분
        # for n in range(Num)
        #     left[1].append(self.x + self.cw // 6 * 2 - image_size_down // 3, self.start + image_gap * (Num - n))
        #     right[1].append(self.x + self.cw // 6 * 4 - image_size_down // 3, self.start + image_gap * (Num - n))
        # speeds[1] = self.speed * 1.1


        # # 두 번째 이미지는 오른쪽에서 시작하여 내려간다. 2순위
        # px[1] = self.x + self.cw // 5 * 2
        # py[1] = image_gap * 1

        # # 세 번째 이미지는 왼쪽에서 시작하여 내려간다. 3순위
        # px[2] = self.x + self.cw // 5 * 0
        # py[2] = image_gap * 0

        # # 네 번째 이미지는 왼쪽에서 시작하여 내려간다. 3순위
        # px[2] = self.x + self.cw // 5 * 0
        # py[2] = image_gap * 0

        # global dist        
        # dist = self.start - self.y

        global image_size
        image_size = self.cw // 6, self.ch // 12
        image_size_down = self.cw // 6 // 3 * 3, self.ch // 12 // 3 * 3
        image_size_middle = self.cw // 6 // 3 * 2, self.ch // 12 // 3 * 2
        image_size_up = self.cw // 6 // 3 * 1, self.ch // 12 // 3 *1

        # 이미지 하나 생성
        global up, middle, down
        down = self.x + self.cw // 6 * 2, self.start - self.image_size[1]
        middle = down[0] - image_size_middle[0] // 3, down[1] + image_size_middle[1] // 2 
        up = middle[0] - image_size_up[0] // 3, middle[1] + image_size_up[1] // 2

    def update(self):

        global px, py, alpha
        global dist

        for n in range(3):
            # 이미지의 시작 y지점부터의 거리 계산
            py[n] += gfw.delta_time * self.speed
            if py[n] > dist + self.image.h:
                py[n] = 0

            # 이미지의 알파값 계산
            if py[n] >= dist:
                alpha[n] = 255
            else:
                calculate_alpha = 255 / dist * py[n]
                alpha[n] = (int)(calculate_alpha)

    def draw(self):
        
        global px, py, alpha

        for n in range(3):
            gfw.image.setImageAlpha(self.image, (int)(alpha[n]))
            self.image.clip_draw_to_origin(0, 0, self.image.w, self.image.h, px[n], self.start - py[n] - self.image.h, self.cw, self.ch)






























class VertScrollBackground:
    def __init__(self, imageName, cw, ch):
        self.imageName = imageName
        self.image = gfw.image.load(res(imageName))
        self.cw, self.ch = cw, ch
        self.scroll = 0
        self.speed = 0

    def update(self):
        self.scroll += self.speed * gfw.delta_time

    def set_scroll(self, scroll):
        self.scroll = scroll

    def draw(self):
        left, bottom = 0, 0
        page = self.image.h * self.cw // self.image.w
        curr = int(-self.scroll) % page
        if curr > 0:
            sh = int(1 + self.image.w * curr / self.cw)
            sb = self.image.h - sh
            src = 0, sb, self.image.w, sh
            dh = int(sh * self.cw / self.image.w)
            dst = 0, curr - dh, self.cw, dh
            self.image.clip_draw_to_origin(*src, *dst)
        dst_height = page #round(self.image.w * self.ch / self.image.h)
        while curr + dst_height < self.ch:
            dst = 0, curr, self.cw, dst_height
            self.image.draw_to_origin(*dst)
            curr += dst_height
        if curr < self.ch:
            dh = self.ch - curr
            sh = int(1 + self.image.w * dh / self.cw)
            src = 0, 0, self.image.w, sh
            dh = int(sh * self.cw / self.image.w)
            dst = 0, curr, self.cw, dh
            self.image.clip_draw_to_origin(*src, *dst)

    def to_screen(self, point):
        x, y = point
        return x - self.scroll, y

    def translate(self, point):
        x, y = point
        return x + self.scroll, y

    def get_boundary(self):
        return (-sys.maxsize, -sys.maxsize, sys.maxsize, sys.maxsize)

image_gap = 1800 // 4

class VertexSolidScrollBackground:
    def __init__(self, image_left, image_right, x, y, cw, ch, standard_y, speed_down, speed_sideway01, speed_sideway02, speed_sideway03):
        self.image_left = gfw.image.load(res(image_left))
        self.image_right = gfw.image.load(res(image_right))
        self.x, self.y = x, y
        self.cw, self.ch = cw, ch
        self.start = standard_y
            
        self.speed_down = speed_down
        self.speed_sideways = speed_sideway01, speed_sideway02, speed_sideway03


        # 시작 지점(왼쪽 기준)
        # down = self.x + self.cw // 6 * 2, self.start - 나무 아랫부분의 높이
        # middle = self.x + self.cw // 6 * 2, self.start - 나무 중간부분의 높이
        # up = self.x + self.cw // 6 * 2, self.start - 나무 윗부분의 높이

        # 시작 지점(오른쪽 기준)
        # down = self.x + self.cw // 6 * 4, self.start - 나무 아랫부분의 높이
        # middle = self.x + self.cw // 6 * 4 + (나무 아랫부분의 너비 - 나무 중간부분의 너비), self.start - 나무 중간부분의 높이
        # up = self.x + self.cw // 6 * 4 + (나무 중간부분의 너비 - 나무 윗부분의 너비), self.start - 나무 윗부분의 높이

        movement_down = 20
        movement_middle = 40
        movement_up = 60

        global leftX, leftY, right, alpha
        leftX = []
        leftY = []
        right = []
        alpha = []

        global Num
        Num = (self.start - self.y) // image_gap
        #Num = 1

        for n in range(Num):
            leftX.append(0)
            leftY.append(0)
            right.append(0)
            alpha.append(0)

        global image_size_down, image_size_middle, image_size_up
        image_size_down = self.cw // 4, self.ch // 4
        image_size_middle = self.cw // 4 // 3 * 2, self.ch // 4 // 3 * 2
        image_size_up = self.cw // 4 // 3 * 1, self.ch // 4 // 3 * 1

        for n in range(Num):
            leftX[n] = self.x + self.cw // 6
            leftY[n] = self.start - image_size_down[1] - image_gap * n
            #alpha[n] = 255 / (self.ch - self.y) * left[n]


    def update(self):
        for n in range(Num):
            leftX[n] += -1 * gfw.delta_time * self.speed_sideways[0]
            leftY[n] += -1 * gfw.delta_time * self.speed_down
            if leftY[n] < -image_size_down[1]:
                leftX[n] = self.x + self.cw // 6
                leftY[n] = self.start - image_size_down[1]

    def draw(self):
        global image_size_down, image_size_middle, image_size_up

        gfw.image.setImageAlpha(self.image_left, 255)
        for n in range(Num):
            self.image_left.clip_draw_to_origin(0, 0, self.image_left.w, self.image_left.h, leftX[n], leftY[n], *image_size_down)