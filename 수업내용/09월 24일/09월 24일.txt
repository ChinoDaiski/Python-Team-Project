키 맵을 만들어서 따로 관리

키 맵 => (입력 타입, 입력 키)들의 모임, 여기선 방향을 의미한다. 즉, 타입(마우스 누르기, 때기), 입력키(상,하,좌,우)로 묶어서 사용하면, 증감을 보다 쉽게 설정할 수 있다.


여기서의 예시는 boy class로 boy가 하는 행동을 함수로 빼서 따로 관리한다.
handle_event에서 boy의 행동을 처리하기 때문에, 입력 키를 따로 받아 입력 키에 따라 boy의 행동을 관련 함수로 불러온다. => 보기 쉽고, 고치기 쉽다는 장점이 있다.





공이 사라지지 않는다. 생성만 될 뿐 -> 이거 처리는 어떻게?
공이 계속 생성되면 fps에 영향을 미친다.

중력은 delta값에 지속적으로 -를 가하는 것으로 만들어진다.
즉, y값이 아닌 dy의 값에 중력을 -하는것으로 중력이 구현된다.

중력에 의해 공이 튀어오르면 그 값을 1보다 적에 음수로 곱하면 그만큼 튀어오른다.
1보다 작은 수를 곱하는 이유는 에너지의 손실을 구현한 것이다.

조건중 dy가 0보다 적을 경우에만 이라는 코드가 있는데 공이 바닥에서 펌핑되는 경우를 막아주는 코드이다.
(해결방법을 찾았다!!! 매우 중요)
 



rand 함수를 만든다. 이 함수는 0.9 ~ 1.1 사이의 값을 반환한다.



update 다음 late update를 만드는 이유 -> 업데이트(출력) 하면서 삭제를 하면 프로그램이 꼬일 수 있기 때문에 late update를 만들어 삭제를 관리한다.



삭제와 관련된 좌표는 카메라 좌표보다 좀더 크게 하여 그 범위를 넘어가면 오브젝트를 삭제하도록 한다.


컨벤션 문서 -> 미리 약속해 놓은 조약들의 집합체, 프로그램을 짤때 참고서 같은 느낌이다.
파일의 사이즈나 함수의 길이 등을 미리 약조해놓은 문서이다. 잘게 짜르는 편이 더욱 좋다곤 한다.
실전은(?) 글쎄...






























